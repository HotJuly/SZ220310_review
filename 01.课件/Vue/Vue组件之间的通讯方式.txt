1.props
	适用场景:父传子,子传父

	父传子:
		1.父组件将数据通过标签属性写在子组件标签上
		2.子组件在配置对象中,书写props声明需要接收的标签属性数据
		3.子组件可以在自己的this身上找到对应名称的props属性

		小总结:父传子,父组件传的是数据

	子传父:
		1.父组件将函数通过标签属性写在子组件的标签上
			注意点:传下去的函数必须声明在父组件的methods中
				因为methods中函数的this会指向当前组件

		2.子组件在配置对象中,书写props声明需要接收的标签属性数据

		3.子组件调用接收到的函数,并向内部传入实参

		4.父组件的方法被执行了,父组件获取到数据可以更新到自己的data中
			因为方法中的this是父组件

		小总结:子传父的基于父传子实现的,父组件传递的是函数,子组件传递的才是数据

2.provide/inject
	适用场景:祖孙组件
	流程:
		1.祖先组件在自己的配置对象中添加provide属性,向外暴露数据
		2.后代组件在自己的配置对象中添加inject属性,接收所需要的数据

		注意点:
			1.provide暴露出来的数据,默认是非响应式
			2.如果想要让暴露出来的数据变为响应式数据,那么就是用Vue.observable将暴露的对象变为响应式对象即可
			3.如果项目中存在多个provide,那么inject查找数据的时候,是从内向外找最近的provide,如果没有才会继续向上查找

3.自定义事件
	绑定自定义事件的方法
		1.给Vue组件标签上添加@事件名即可
		2.通过组件的实例对象,调用$on方法即可

	角色:
		1.订阅者
		2.发布者

	操作:
		1.订阅
		2.发布
		3.解绑

	约束:
		1.订阅必须在发布之前
		2.订阅者和发布者必须同时存在

	$on
		用于给某个组件实例对象绑定自定义事件
	$once
		用于给某个组件实例对象绑定自定义事件,但是只能触发一次,触发一次之后会自动解绑
	$off
		用于解绑某个组件实例上某些自定义事件
	$emit
		用于触发某个组件实例对象上的某些自定义事件


	v-model
		对input标签使用
			1.将data中某个状态的数据作为默认值展示在input框中
				<input type="text" :value="text">

			2.当用户修改input框中的内容时,会自动修改对应的状态数据
				事件源:input标签
				事件名:input(默认值)
    				<input type="text" :value="text" @input="(event)=>{text=event.target.value}">

		对组件标签使用
			1.将data中某个状态的数据作为标签属性传递给子组件(默认属性名:value)
    				<HelloWorld :value="text"/>

			2.给子组件绑定自定义事件(默认事件名是input),子组件可以通过该自定义事件向父组件传参,实现修改父组件数据的功能
				<HelloWorld :value="text" @input="(data)=>{text = data}"/>

		扩展点:v-model指令如果对组件标签使用,可以在子组件的配置对象中,使用model配置属性对属性名以及事件名进行自定义操作

	.sync修饰符
		1.将data中某个状态的数据作为标签属性传递给子组件(属性名可以自己随便写)
    			<HelloWorld :msg="msg"/>

		2.给子组件绑定自定义事件(事件名=>update:属性名),子组件可以通过该自定义事件向父组件传参,实现修改父组件数据的功能
    			<HelloWorld :msg="msg" @update:msg="(data)=>{msg = data}"/>

		扩展:在Vue3中,.sync和v-model二合一了,指令用的还是v-model,但是实际效果是.sync的效果

	全局事件总线
		原理:在所有组件实例之外,创建一个永远不会销毁的组件实例,用于实现任意组件之间的通讯
		流程:
			1.给Vue的原型对象上添加$bus属性(可以自定义),属性值是Vue对象(不能自定义)
				Vue.prototype.$bus = new Vue();
			2.需要接收数据的组件订阅消息
    				this.$bus.$on('sendMsg',(data)=>{
     				 	console.log('sendMsg',data)
    				})
			3.需要发布数据的组件发布数据
    				this.$bus.$emit('sendMsg',"我是APP的数据")

		注意点:
			1.子组件的mounted会早于父组件的mounted执行
			2.无论任何组件销毁,都不会导致$bus被销毁,所以在组件卸载的时候,一定要解绑相关的全局事件总线
				

4.找到对应组件的实例对象
	$parent->可以通过该属性获取到当前组件的父组件实例对象
	$root->可以找到当前组件树中的根组件实例对象,其实就是Root组件
	$children->可以获取到由子组件们组成的数组
		父组件可以通过该属性找到对应的子组件的实例对象,使用他们的属性和方法

		注意点:
			1.$children数组中的排列顺序与组件书写顺序并没有必然关系
			2.$children数组不是响应式的,操作该数组中实例对象的排列顺序,不会影响到页面上的展示效果

	$refs->首先他返回的是多个内容组成的对象,可以配合标签属性ref使用,找到页面上对应的标签

		ref对原生DOM标签使用
			在$refs上可以获取到对应的真实DOM

		ref对组件标签使用
			在$refs上可以获取到对应的组件实例对象

5.$attrs,$listeners
	$attrs
		他是一个对象
		它相当于是一个垃圾桶
		他内部会收集当前组件标签属性中,没有被props接收的属性

	$listeners
		他是一个对象
		它内部会收集当前组件身上绑定的所有自定义事件
		他会将自定义事件名称作为属性,事件的回调函数作为属性值存放




















