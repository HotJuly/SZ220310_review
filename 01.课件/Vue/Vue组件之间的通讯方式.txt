1.props
	适用场景:父传子,子传父

	父传子:
		1.父组件将数据通过标签属性写在子组件标签上
		2.子组件在配置对象中,书写props声明需要接收的标签属性数据
		3.子组件可以在自己的this身上找到对应名称的props属性

		小总结:父传子,父组件传的是数据

	子传父:
		1.父组件将函数通过标签属性写在子组件的标签上
			注意点:传下去的函数必须声明在父组件的methods中
				因为methods中函数的this会指向当前组件

		2.子组件在配置对象中,书写props声明需要接收的标签属性数据

		3.子组件调用接收到的函数,并向内部传入实参

		4.父组件的方法被执行了,父组件获取到数据可以更新到自己的data中
			因为方法中的this是父组件

		小总结:子传父的基于父传子实现的,父组件传递的是函数,子组件传递的才是数据

2.provide/inject
	适用场景:祖孙组件
	流程:
		1.祖先组件在自己的配置对象中添加provide属性,向外暴露数据
		2.后代组件在自己的配置对象中添加inject属性,接收所需要的数据

		注意点:
			1.provide暴露出来的数据,默认是非响应式
			2.如果想要让暴露出来的数据变为响应式数据,那么就是用Vue.observable将暴露的对象变为响应式对象即可
			3.如果项目中存在多个provide,那么inject查找数据的时候,是从内向外找最近的provide,如果没有才会继续向上查找

3.自定义事件
	v-model
		对input标签使用
			1.将data中某个状态的数据作为默认值展示在input框中
				<input type="text" :value="text">

			2.当用户修改input框中的内容时,会自动修改对应的状态数据
				事件源:input标签
				事件名:input(默认值)
    				<input type="text" :value="text" @input="(event)=>{text=event.target.value}">

		对组件标签使用
			1.将data中某个状态的数据作为标签属性传递给子组件(默认属性名:value)
    				<HelloWorld :value="text"/>

			2.给子组件绑定自定义事件(默认事件名是input)子组件可以通过该自定义事件向父组件传参,实现修改父组件数据的功能
				<HelloWorld :value="text" @input="(data)=>{text = data}"/>

		扩展点:v-model指令如果对组件标签使用,可以在子组件的配置对象中,使用model配置属性对属性名以及事件名进行自定义操作




















