1.key值的使用
	在Vue中,使用v-for根据状态数据,遍历出多个节点的时候,需要给每个节点添加上唯一的key值

2.常用作key值的数据
	1.遍历得到的数据上的唯一标识,例如:id
	2.遍历得到的下标,例如:index
	3.遍历得到的数据本身,前提是该数据必须是基本数据类型

	随机数也可以当做key值,但是不推荐使用,这样会让key值失去意义

3.key值的作用
	与diff算法有关
	当响应式属性的值发生变化时,Vue会根据最新的数据生成全新的虚拟DOM树,并与旧的虚拟DOM树进行比较,最终找到可以复用的旧的真实DOM,
		而其中key值就是比较的关键

	first render:
		1.将template模版解析成为render函数
		2.调用render函数生成虚拟DOM树
		3.根据虚拟DOM树生成真实DOM树
		4.将生成的真实DOM树挂载到页面上
		5.GUI线程根据最新的DOM结构,绘制出最新的页面

	注意:首次挂载渲染中,不存在diff算法

	update render:
		1.将最新的data数据传给render函数
		2.调用render函数生成全新的虚拟DOM树
		3.将新旧两棵虚拟DOM树进行比较
		4.如果遇到两个属性值相同的虚拟DOM,那么新的虚拟DOM就复用旧的真实DOM
		5.如果两个虚拟DOM不相同,那么就根据新的虚拟DOM生成新的真实DOM
		6.当所有虚拟DOM都比较完成之后,将最新的真实DOM树替换指定区域
		7.GUI线程根据最新的DOM结构,绘制出最新的页面

	在update render中,流程3,4,5就是所谓的diff算法

	diff算法的比较:是同层比较,只会查找旧的虚拟DOM树中同级的节点,不会考虑深度查找

4.使用下标作为key值可能出现的问题
	如果用于遍历的数据,后期不会发生修改,其实是用下标作为key值也不会出现问题
	原因:因为首次渲染中,就没有diff算法的参与,而key值是用来比较哪些节点可以复用的

	案例一:input案例
		出现的问题:diff算法生效了,但是复用错真实DOM了

	案例二:商品价格排序
		出现的问题:diff算法失效了,结果导致所有节点都是通过新的虚拟DOM生成的
			明明数据没有任何的变化,只是显示的顺序改变了,最终明明有可以复用的节点,但是没有复用成功

		此案例中,diff算法不仅没有优化性能,反而还做了许多无用功,倒是项目渲染更慢

5.使用唯一标识作为key值的函数
	只要服务器返回的对象的唯一标识没有发生变化,那么之前生成的真实DOM就可以一直复用下去
		






