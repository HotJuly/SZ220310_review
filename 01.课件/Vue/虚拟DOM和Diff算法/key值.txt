1.key值使用方式
	当开发者使用状态数据遍历产生节点的时候,需要给每个节点添加一个唯一标识key

2.常用作key值的数据
	-遍历得到的数据的下标
	-遍历得到的数据中的某个唯一标识,例如:id
	-遍历得到的数据本身,也就是item

3.key值作用
	配合diff算法,提高diff算法的效率
	当遍历的数据发生变化时,Vue会根据最新的数据生成新的虚拟DOM,并与旧的虚拟DOM进行对比,找到可以复用旧的真实DOM对象进行复用
		key值就是新旧虚拟DOM对比的关键
		虚拟DOM就是用来对比的,实际复用的永远是真实DOM

	first render:
		1.将template字符串编译成render函数
		2.调用render函数,将当前数据传入,生成对应的虚拟DOM树
		3.根据虚拟DOM树生成真实DOM树
		4.将真实DOM树替换掉页面上的el元素
		5.最后浏览器使用GUI线程将挂载的DOM结构进行渲染

		注意:首次渲染中,没有diff算法参与

	update render:
		1.将最新的数据传入render函数,生成最新的虚拟DOM树
		2.将新的虚拟DOM树与旧的虚拟DOM树进行对比
		3.如果两个虚拟DOM相同,那么就复用旧的真实DOM
		4.如果两个虚拟DOM不相同,那么放弃旧的真实DOM,根据最新的虚拟DOM生成一个全新的真实DOM
		5.经过2,3,4之后,我们会获得一棵最新的真实DOM树
		6.将最新的真实DOM替换掉对应区域的旧的真实DOM
		7.最后浏览器使用GUI线程将最新的DOM结构进行渲染

		注意:其中2,3,4就是所谓的diff算法
		diff算法的功能就是在更新组件的过程中,计算找到哪些节点可以继续复用,不需要生成全新的

		补充说明:diff算法是同层级查找比较,不会跨层级比较

4.使用下标作为key值,可能出现的问题
	用下标作为key值不一定会出现问题,因为首次渲染中用不到key值
		也就是说,只要以后不更新当前遍历的数据,那么key值使用下标也没什么事

	1.input案例
		本案例中,diff算法进行了比较,同时真实DOM也复用了,但是最终由于key值的原因,复用错了

	2.商品排序功能
		本案例中,diff算法进行了比较,但是由于key值和数据的关系,明明具有可以复用的真实DOM,但是最终没有复用成功
			导致,每个节点都是全新生成
			diff算法不仅没有优化性能,反而劣化了性能,做了很多的无用功

5.使用唯一标识做为key值的好处
	只要服务器返回的数据没有发生变化,那么对应的真实DOM就可以一直复用下去





		